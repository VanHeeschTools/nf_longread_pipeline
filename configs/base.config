// Execution config

params {
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
profiles {
    slurm {
        process {
            cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
            memory = { check_max( 10.GB * task.attempt, 'memory' ) }
            time   = { check_max( 4.h  * task.attempt, 'time'   ) }

            errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
            maxRetries    = 3
            maxErrors     = '-1'

            withLabel: 'process_low' {
                cpus = { check_max( 8   * task.attempt, 'cpus'   ) }
                memory =  { check_max( 12.GB * task.attempt, 'memory' ) }
                time = { check_max( 8.h  * task.attempt, 'time'    ) }
            }

            withLabel: 'process_medium' {
                cpus = { check_max( 12   * task.attempt, 'cpus'   ) }
                memory =  { check_max( 36.GB * task.attempt, 'memory' ) }
                time = { check_max( 16.h  * task.attempt, 'time'    ) }
            }

            withLabel: 'process_high' {
                cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
                memory = { check_max( 128.GB * task.attempt, 'memory' ) }
                time   = { check_max( 48.h   * task.attempt, 'time'   ) }
            }
        }
    }  
}

// File publishing config
process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    withName: 'pychopper' {
        publishDir = [
            [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: '{*_pychopper_report.pdf,*_pychopper_stats.tsv}'
            ],
            [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}/full_length_reads" },
                mode: 'copy',
                saveAs: { filename -> params.store_full_length_reads ? filename : null },
                pattern: '*_full_length_reads.fastq.gz'
            ]
        ]
    }
    withName: 'MINIMAP2' {
        publishDir = [
            [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
                saveAs: { null }
            ]
        ]
    }
    withName: 'STRINGTIE' {
        publishDir = [
            [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
                saveAs: { null }
            ]
        ]
    }
    withName: 'PROCESS_ALIGNMENT' {
        publishDir = [
            [
                path: { "${params.outdir}/minimap2" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }
    withLabel: 'merge_gtfs' {
        publishDir = [
            [
                path: { "${params.outdir}/merged_gtf" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }
    withLabel: 'remap' {
        publishDir = [
            [
                enabled: false
            ]
        ]
    }
    withName: 'SALMON' {
        publishDir = [
            [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
                mode: 'copy',
                saveAs: { filename -> filename.endsWith("quant.sf") ? filename : null }
            ]
        ]
    }
    withName: 'VERSIONS' {
        publishDir = [
            [
                path: { "${params.outdir}/pipeline_info" },
                mode: 'copy'
            ]
        ]
    }
}
